C++ Coding Standard
by Kyle Furey

Following this coding standard will ensure your C++ code is as clean, readable, and portable as possible. It is recommended you follow this standard or maintain your own standard for consistency across your codebase.

C++ Coding Standard
     1. Use tabs that equal 4 spaces.
     2. Use trailing braces like:
        if (condition) {
        } else {
        }
     3. Else statements start on the line after the closing brace.
     4. Avoid nested if and else statements as much as possible. Keep scopes and statements short and sweet.
     5. Always use switch statements over chained if statements. If you cannot use a switch statement, minimize the number of conditions checked.
     6. Always use braces to denote scope. Avoid using inline statements.
     7. Wrap complex mathematical and boolean logic in parentheses to make it more readable and explicit.
     8. Try not to space code out with newlines unless blocks of code can be separated and organized. Add comments to label these blocks of code.
     9. Specify the precision of floating point literals when relevant like:
        constexpr float pi = 3.14f;
    10. All public functions, methods, classes, and public or global variables are PascalCase.
    11. All parameters, local variables, and private or protected variables are camelCase.
    12. Every declaration should have a comment formatted like:
        /** My comment here. */
    13. Multi-line comments should be formatted like:
        /**
         * My comment here.<br/>
         * My comment ends here.
         */
    14. Note that multi-line comments use <br/> to indicate a newline for compatibility.
    15. Comments over macros, blocks of code, and .cpp implementations should be formatted like:
        // My comment here.
        // My comment ends here.
    16. Note the comment does not have <br/> in this case. There is no need for html newlines in // comments.
    17. Add a “header” indicating the beginning of your declarations like:
        
        
        // MY CLASS
    18. Add two newlines before each header to properly separate and organize your code.
    19. All code files should start with a comment stating the type of file, the name and purpose of the file, and who created it like:
        // .h
        // My Class
        // by Kyle Furey
    20. Avoid typedefs and instead use using statements, since they can be templated.
    21. Template types should avoid being named T or U. Instead prefer the name "Type" or something that matches what types should be templated.
    22. Templates should always use typename instead of class or struct.
    23. Templates with parameter packs should be declared with the … in between typename and the type name.
    24. Templates should static_assert if a certain type breaks your code.
    25. All code should be wrapped in a namespace unless your codebase is not intended to be portable. If you cannot use a namespace, prefix your types with the name of your codebase in some way.
    26. Don’t use “using namespace” on a global level. Only main.cpp should use this syntax.
    27. Define your own types within your namespace with using statements wherever possible so you are not relying on too much external code.
    28. Use as little #include statements as possible. Wrap multiple includes into a header file if needed.
    29. Classes should generally always be used instead of structures. However, a good practice is that structures represent objects that are trivially copyable.
    30. Enum values, macros, and constants are SCREAM_CASE. Note that each space is an underscore.
    31. All enums should be enum classes.
    32. Avoid macros as much as possible and instead use constexpr functions, methods, and variables.
    33. Recursive functions and methods should end their name with the word Recursively.
    34. Avoid auto unless the implicit type is verbose and clearly defined. Always assume auto is by value, so use auto& for references and auto* for pointers. Auto is also OK for foreach loops.
    35. Use const as much as possible, including in variables, methods, and pointers.
    36. Don’t declare a constant pointer as Type* const ptr. Only use const Type* ptr and Type const* ptr.
    37. Pointers and references should always have their * or & directly next to the type name as it’s part of the type.
    38. Use references when an object should never be null, and pointers when an object can be null.
    39. Wrap dynamic memory in smart pointers unless there is explicit management of that memory within a class. Never expect developers to manage your memory for you.
    40. Use RAII whenever and wherever possible. Ensure classes that are not trivially copyable follow the Rule of 5.
    41. Static and global variables should be avoided if possible. Static functions in a class are OK if their usage matches the class they reside in.
    42. Avoid singletons and global variables. Instead wrap variables in a class that is instantiated once. Objects should refer to that class when they need access to those variables. 
    43. However, all functions that are not methods should be declared as static.
    44. All functions and methods should not have any undefined behavior. Always sanity check parameters and ensure every start and end point of your function is well defined.
    45. Wrap functions into helper functions or a base class / interface if you ever need to repeat yourself. Keep your code DRY.
    46. Function and method overloading should instead be replaced by naming each method based on its parameters. This is to ensure programmers do not accidentally call the wrong function. Default parameters are also OK if it simplifies the number of declarations.
    47. Method overloading is OK for const overloaded methods so long as they are identical.
    48. Don’t put void into functions and methods with no parameters.
    49. Constructors should always use list initialization for all a class’s fields. Use default parameters to condense the number of constructors.
    50. Use the [[nodiscard]] attribute before getter methods and functions that explicitly return an important value.
    51. Classes should never inherit from multiple classes unless a class is explicitly an interface. Ensure the first class inherited from is concrete followed by interfaces.
    52. Interface methods should declare their functions as abstract if no default implementation is provided.
    53. Operators should always have some corresponding method it calls. It’s best to use operators as an overload for already existing methods unless it’s obvious what the operator does (specifically, mathematical operators on numeric objects don’t need methods).
    54. If possible, wrap operators in an interface that provides the methods that need to be overloaded while implementing the operators with those methods.
    55. If a class does not need to be inherited from, always declare it final.
    56. All classes with virtual methods must define a virtual destructor at the highest level. This includes interfaces.
    57. Order class fields as follows: friend classes, public types and subclasses, public variables, public methods, protected types and subclasses, protected variables, protected methods, private types and subclasses, private variables, private methods.
    58. This ensures classes have their public interfaces at the beginning of the declaration.
    59. Encapsulate and abstract your classes as much as possible. Ensure what is public is what is intended to be used across the codebase, and what is protected is safe to be modified by derived classes. Everything else should be private.
    60. Avoid public variables if you have getters and setters for other variables. It is more important to be consistent even if getters and setters are redundant for what would be a public field.
    61. All code files should have a .h and .cpp file, even if the .cpp file is mostly empty. Avoid using .hpp files and .c files (unless you are explicitly using C code).
    62. The name of the .h and .cpp file should describe the class or classes being defined, and be placed within a folder of the same name.
    63. It’s a good practice to keep classes that inherit from each other in a file structure that matches the inheritance, like:
        BaseClasses/BaseClass.h
        BaseClasses/DerivedClass/DerivedClass.h
    64. Note the base class folder is plural as it likely has multiple inheriting classes.
    65. Type casting should always be done through static and dynamic cast.
    66. Avoid using C casts unless you are explicitly doing something with raw memory.
    67. Never use const cast or a function style cast.
    68. Type operators in classes should always be marked as explicit and provide const overloads.
    69. It’s a good practice to avoid raw primitive data types like int and instead use built in typedefs like int32_t.
    70. Avoid throwing exceptions unless a function or method cannot complete without failing (usually when dealing with references).
    71. Always prefer throwing exceptions over undefined behavior. It’s also a good practice to try catch code that can throw exceptions based on user input.
    72. Generally prefer readability, speed, and efficiency over memory usage unless working with limited memory.
    73. Write TODO comments wherever code is in progress, but always ensure your code is functional before allowing other developers to access it. Keep your code as bulletproof as possible so it can be shipped.
    74. Avoid conditionally compiled code as it can make extending code a challenge.
